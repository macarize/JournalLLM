{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AIOFARM\\\\JournalLLM\\\\frontend\\\\src\\\\components\\\\JournalDetailPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JournalDetailPage({\n  userId\n}) {\n  _s();\n  const {\n    journalId\n  } = useParams();\n  const [journal, setJournal] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [newText, setNewText] = useState(''); // text for generating new comments\n\n  useEffect(() => {\n    if (userId && journalId) {\n      fetchJournalDetail();\n    }\n    // eslint-disable-next-line\n  }, [userId, journalId]);\n  const fetchJournalDetail = async () => {\n    try {\n      const res = await fetch(`http://localhost:8000/journals/${userId}/detail/${journalId}`);\n      const data = await res.json();\n      if (data.error) {\n        alert(data.error);\n      } else {\n        setJournal(data.journal);\n        setComments(data.comments);\n      }\n    } catch (err) {\n      console.error(err);\n      alert('Error fetching journal detail');\n    }\n  };\n  const generateComments = async () => {\n    if (!userId || !journalId) return;\n    try {\n      const res = await fetch('http://localhost:8000/comments/journal_comment', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: parseInt(userId, 10),\n          journal_id: parseInt(journalId, 10),\n          new_journal_text: newText\n        })\n      });\n      const data = await res.json();\n      if (data.error) {\n        alert(data.error);\n      } else {\n        alert(data.message);\n        // The new comments come in data.comments\n        // We can re-fetch the journal detail or just add them\n        fetchJournalDetail();\n      }\n    } catch (err) {\n      console.error(err);\n      alert('Error generating comments');\n    }\n  };\n  if (!journal) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Journal Detail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading or no journal selected...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Journal Detail\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: journal.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: journal.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Generate Comments from Your Bots\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: \"3\",\n      cols: \"50\",\n      value: newText,\n      onChange: e => setNewText(e.target.value),\n      placeholder: \"What new text do you want the bots to comment on?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateComments,\n      children: \"Generate Bot Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Existing Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), comments.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No comments yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 33\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: comments.map(c => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [\"Comment #\", c.id, \" (Bot ID: \", c.bot_id, \"):\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), \" \", c.comment, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteComment(c.comment_id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)]\n      }, c.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(JournalDetailPage, \"qOj5/m9RhWFIJolNHb4d3NtUpQs=\", false, function () {\n  return [useParams];\n});\n_c = JournalDetailPage;\nexport default JournalDetailPage;\nvar _c;\n$RefreshReg$(_c, \"JournalDetailPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","JournalDetailPage","userId","_s","journalId","journal","setJournal","comments","setComments","newText","setNewText","fetchJournalDetail","res","fetch","data","json","error","alert","err","console","generateComments","method","headers","body","JSON","stringify","user_id","parseInt","journal_id","new_journal_text","message","style","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","title","content","rows","cols","value","onChange","e","target","placeholder","onClick","length","map","c","id","bot_id","comment","deleteComment","comment_id","_c","$RefreshReg$"],"sources":["C:/Users/AIOFARM/JournalLLM/frontend/src/components/JournalDetailPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nfunction JournalDetailPage({ userId }) {\r\n  const { journalId } = useParams();\r\n  const [journal, setJournal] = useState(null);\r\n  const [comments, setComments] = useState([]);\r\n  const [newText, setNewText] = useState(''); // text for generating new comments\r\n\r\n  useEffect(() => {\r\n    if (userId && journalId) {\r\n      fetchJournalDetail();\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [userId, journalId]);\r\n\r\n  const fetchJournalDetail = async () => {\r\n    try {\r\n      const res = await fetch(`http://localhost:8000/journals/${userId}/detail/${journalId}`);\r\n      const data = await res.json();\r\n      if (data.error) {\r\n        alert(data.error);\r\n      } else {\r\n        setJournal(data.journal);\r\n        setComments(data.comments);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert('Error fetching journal detail');\r\n    }\r\n  };\r\n\r\n  const generateComments = async () => {\r\n    if (!userId || !journalId) return;\r\n    try {\r\n      const res = await fetch('http://localhost:8000/comments/journal_comment', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          user_id: parseInt(userId, 10),\r\n          journal_id: parseInt(journalId, 10),\r\n          new_journal_text: newText\r\n        })\r\n      });\r\n      const data = await res.json();\r\n      if (data.error) {\r\n        alert(data.error);\r\n      } else {\r\n        alert(data.message);\r\n        // The new comments come in data.comments\r\n        // We can re-fetch the journal detail or just add them\r\n        fetchJournalDetail();\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert('Error generating comments');\r\n    }\r\n  };\r\n\r\n  if (!journal) {\r\n    return (\r\n      <div style={{ margin: 20 }}>\r\n        <h2>Journal Detail</h2>\r\n        <p>Loading or no journal selected...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={{ margin: 20 }}>\r\n      <h2>Journal Detail</h2>\r\n      <h3>{journal.title}</h3>\r\n      <p>{journal.content}</p>\r\n\r\n      <hr />\r\n\r\n      <h4>Generate Comments from Your Bots</h4>\r\n      <textarea\r\n        rows=\"3\"\r\n        cols=\"50\"\r\n        value={newText}\r\n        onChange={e => setNewText(e.target.value)}\r\n        placeholder=\"What new text do you want the bots to comment on?\"\r\n      />\r\n      <br />\r\n      <button onClick={generateComments}>Generate Bot Comments</button>\r\n\r\n      <hr />\r\n      <h4>Existing Comments</h4>\r\n      {comments.length === 0 && <p>No comments yet.</p>}\r\n      <ul>\r\n        {comments.map((c) => (\r\n          <li key={c.id}>\r\n            <strong>Comment #{c.id} (Bot ID: {c.bot_id}):</strong> {c.comment}\r\n            <button onClick={() => deleteComment(c.comment_id)}>Delete</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JournalDetailPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,iBAAiBA,CAAC;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EACrC,MAAM;IAAEC;EAAU,CAAC,GAAGN,SAAS,CAAC,CAAC;EACjC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE5CD,SAAS,CAAC,MAAM;IACd,IAAIM,MAAM,IAAIE,SAAS,EAAE;MACvBO,kBAAkB,CAAC,CAAC;IACtB;IACA;EACF,CAAC,EAAE,CAACT,MAAM,EAAEE,SAAS,CAAC,CAAC;EAEvB,MAAMO,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,kCAAkCX,MAAM,WAAWE,SAAS,EAAE,CAAC;MACvF,MAAMU,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;MAC7B,IAAID,IAAI,CAACE,KAAK,EAAE;QACdC,KAAK,CAACH,IAAI,CAACE,KAAK,CAAC;MACnB,CAAC,MAAM;QACLV,UAAU,CAACQ,IAAI,CAACT,OAAO,CAAC;QACxBG,WAAW,CAACM,IAAI,CAACP,QAAQ,CAAC;MAC5B;IACF,CAAC,CAAC,OAAOW,GAAG,EAAE;MACZC,OAAO,CAACH,KAAK,CAACE,GAAG,CAAC;MAClBD,KAAK,CAAC,+BAA+B,CAAC;IACxC;EACF,CAAC;EAED,MAAMG,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI,CAAClB,MAAM,IAAI,CAACE,SAAS,EAAE;IAC3B,IAAI;MACF,MAAMQ,GAAG,GAAG,MAAMC,KAAK,CAAC,gDAAgD,EAAE;QACxEQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,OAAO,EAAEC,QAAQ,CAACzB,MAAM,EAAE,EAAE,CAAC;UAC7B0B,UAAU,EAAED,QAAQ,CAACvB,SAAS,EAAE,EAAE,CAAC;UACnCyB,gBAAgB,EAAEpB;QACpB,CAAC;MACH,CAAC,CAAC;MACF,MAAMK,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;MAC7B,IAAID,IAAI,CAACE,KAAK,EAAE;QACdC,KAAK,CAACH,IAAI,CAACE,KAAK,CAAC;MACnB,CAAC,MAAM;QACLC,KAAK,CAACH,IAAI,CAACgB,OAAO,CAAC;QACnB;QACA;QACAnB,kBAAkB,CAAC,CAAC;MACtB;IACF,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZC,OAAO,CAACH,KAAK,CAACE,GAAG,CAAC;MAClBD,KAAK,CAAC,2BAA2B,CAAC;IACpC;EACF,CAAC;EAED,IAAI,CAACZ,OAAO,EAAE;IACZ,oBACEL,OAAA;MAAK+B,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAG,CAAE;MAAAC,QAAA,gBACzBjC,OAAA;QAAAiC,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvBrC,OAAA;QAAAiC,QAAA,EAAG;MAAiC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC;EAEV;EAEA,oBACErC,OAAA;IAAK+B,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAG,CAAE;IAAAC,QAAA,gBACzBjC,OAAA;MAAAiC,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBrC,OAAA;MAAAiC,QAAA,EAAK5B,OAAO,CAACiC;IAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACxBrC,OAAA;MAAAiC,QAAA,EAAI5B,OAAO,CAACkC;IAAO;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAExBrC,OAAA;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAENrC,OAAA;MAAAiC,QAAA,EAAI;IAAgC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzCrC,OAAA;MACEwC,IAAI,EAAC,GAAG;MACRC,IAAI,EAAC,IAAI;MACTC,KAAK,EAAEjC,OAAQ;MACfkC,QAAQ,EAAEC,CAAC,IAAIlC,UAAU,CAACkC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC1CI,WAAW,EAAC;IAAmD;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChE,CAAC,eACFrC,OAAA;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNrC,OAAA;MAAQ+C,OAAO,EAAE3B,gBAAiB;MAAAa,QAAA,EAAC;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAEjErC,OAAA;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNrC,OAAA;MAAAiC,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACzB9B,QAAQ,CAACyC,MAAM,KAAK,CAAC,iBAAIhD,OAAA;MAAAiC,QAAA,EAAG;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACjDrC,OAAA;MAAAiC,QAAA,EACG1B,QAAQ,CAAC0C,GAAG,CAAEC,CAAC,iBACdlD,OAAA;QAAAiC,QAAA,gBACEjC,OAAA;UAAAiC,QAAA,GAAQ,WAAS,EAACiB,CAAC,CAACC,EAAE,EAAC,YAAU,EAACD,CAAC,CAACE,MAAM,EAAC,IAAE;QAAA;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACa,CAAC,CAACG,OAAO,eACjErD,OAAA;UAAQ+C,OAAO,EAAEA,CAAA,KAAMO,aAAa,CAACJ,CAAC,CAACK,UAAU,CAAE;UAAAtB,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAF5Da,CAAC,CAACC,EAAE;QAAAjB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGT,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAAClC,EAAA,CAjGQF,iBAAiB;EAAA,QACFH,SAAS;AAAA;AAAA0D,EAAA,GADxBvD,iBAAiB;AAmG1B,eAAeA,iBAAiB;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}