{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leehy\\\\JournalLLM\\\\frontend\\\\src\\\\components\\\\CommentPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CommentPage() {\n  _s();\n  const [userId, setUserId] = useState('');\n  const [newJournalText, setNewJournalText] = useState('');\n  const [comments, setComments] = useState([]);\n  const getComments = async () => {\n    // POST -> @comment_router.post(\"/\")\n    if (!userId) {\n      alert('Please specify userId.');\n      return;\n    }\n    const numericUserId = parseInt(userId, 10);\n    if (Number.isNaN(numericUserId)) {\n      alert('User ID must be a number.');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:8000/comments/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: numericUserId,\n          new_journal_text: newJournalText\n        })\n      });\n      const data = await response.json();\n      setComments(data.comments || []);\n    } catch (error) {\n      console.error(error);\n      alert('Error fetching comments');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments from Bots\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"User ID: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: userId,\n        onChange: e => setUserId(e.target.value),\n        placeholder: \"Numeric user ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: \"4\",\n        cols: \"50\",\n        placeholder: \"New journal entry text...\",\n        value: newJournalText,\n        onChange: e => setNewJournalText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getComments,\n      children: \"Get Bot Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Bot Replies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: comments.map((c, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [c.bot_name, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), \" \", c.comment]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(CommentPage, \"rYTx7SMWI8iXRKFTi7EeibyraXQ=\");\n_c = CommentPage;\nexport default CommentPage;\nvar _c;\n$RefreshReg$(_c, \"CommentPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CommentPage","_s","userId","setUserId","newJournalText","setNewJournalText","comments","setComments","getComments","alert","numericUserId","parseInt","Number","isNaN","response","fetch","method","headers","body","JSON","stringify","user_id","new_journal_text","data","json","error","console","style","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","rows","cols","onClick","map","c","index","bot_name","comment","_c","$RefreshReg$"],"sources":["C:/Users/leehy/JournalLLM/frontend/src/components/CommentPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction CommentPage() {\r\n  const [userId, setUserId] = useState('');\r\n  const [newJournalText, setNewJournalText] = useState('');\r\n  const [comments, setComments] = useState([]);\r\n\r\n  const getComments = async () => {\r\n    // POST -> @comment_router.post(\"/\")\r\n    if (!userId) {\r\n      alert('Please specify userId.');\r\n      return;\r\n    }\r\n    const numericUserId = parseInt(userId, 10);\r\n    if (Number.isNaN(numericUserId)) {\r\n      alert('User ID must be a number.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:8000/comments/', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          user_id: numericUserId,\r\n          new_journal_text: newJournalText\r\n        })\r\n      });\r\n      const data = await response.json();\r\n      setComments(data.comments || []);\r\n    } catch (error) {\r\n      console.error(error);\r\n      alert('Error fetching comments');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ margin: 20 }}>\r\n      <h2>Comments from Bots</h2>\r\n      <div>\r\n        <label>User ID: </label>\r\n        <input\r\n          value={userId}\r\n          onChange={e => setUserId(e.target.value)}\r\n          placeholder=\"Numeric user ID\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <textarea\r\n          rows=\"4\"\r\n          cols=\"50\"\r\n          placeholder=\"New journal entry text...\"\r\n          value={newJournalText}\r\n          onChange={e => setNewJournalText(e.target.value)}\r\n        />\r\n      </div>\r\n      <button onClick={getComments}>Get Bot Comments</button>\r\n\r\n      <h3>Bot Replies</h3>\r\n      <ul>\r\n        {comments.map((c, index) => (\r\n          <li key={index}>\r\n            <strong>{c.bot_name}:</strong> {c.comment}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommentPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}